#!/bin/bash -e
# Copyright (c) 2019 Yubico AB. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.
#
# XXX This should really be a Makefile.

CC=${CC:-clang}
PROFDATA=${PROFDATA:-llvm-profdata}
COV=${COV:-llvm-cov}
OBJ=$(realpath obj)

T=""
#T+=" harnesses/assert"
#T+=" harnesses/assert-rsa-h-p"
#T+=" harnesses/assert-u2f"
#T+=" harnesses/cred"
#T+=" harnesses/cred-rsa-h-p"
#T+=" harnesses/cred-u2f"
#T+=" harnesses/cred-u2f-exclude"
#T+=" harnesses/fido2-assert-G"
#T+=" harnesses/fido2-assert-V"
#T+=" harnesses/fido2-cred-M"
#T+=" harnesses/fido2-cred-V"
T+=" harnesses/fuzz_assert"
T+=" harnesses/fuzz_bio"
T+=" harnesses/fuzz_cred"
T+=" harnesses/fuzz_credman"
T+=" harnesses/fuzz_mgmt"

clean() {
	echo cleaning
	rm -rf ${OBJ}
	mkdir ${OBJ}
}

build() {
	echo building
	mkdir ${OBJ}/build
	(cd ${OBJ}/build && cmake -DFUZZ=1 -DLIBFUZZER=1 -DCOVERAGE=1 \
		-DCMAKE_BUILD_TYPE=Debug ../../..) 2>/dev/null 1>&2
	make -C ${OBJ}/build 2>/dev/null 1>&2
	${CC} -fPIC -D_GNU_SOURCE -shared -o ${OBJ}/preload-fuzz.so \
		preload-fuzz.c
}

sync() {
	if [ -n "${REMOTE}" ]; then
		for t in ${T}; do
			echo syncing ${t}
			(cd ${OBJ} && REMOTE="${REMOTE}" ../${t} sync)
		done
	else
		tar -C ${OBJ} -zxf corpus.tgz
	fi
}

run() {
	export LLVM_PROFILE_FILE="profraw/%h-%p.profraw"
	export PRELOAD=$(realpath ${OBJ}/preload-fuzz.so)

	for t in ${T}; do
		echo running ${t}
		(cd ${OBJ} && ../${t} run)
	done
}

merge() {
	echo merging
	(cd ${OBJ} && \
		${PROFDATA} merge -sparse profraw/*.profraw \
			-o libfido2.profdata &&
		${COV} show -format=html -tab-size=8 build/src/libfido2.so \
			-instr-profile=libfido2.profdata > report.html &&
		${COV} report -use-color=false build/src/libfido2.so \
			-instr-profile=libfido2.profdata > summary.txt &&
		${COV} report -use-color=false -show-functions \
			-instr-profile=libfido2.profdata build/src/libfido2.so \
			../../src/*.[ch] > functions.txt)
}

clean
build
sync
run
merge
